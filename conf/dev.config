//NOTE: Result directories used in XBS_main.py
// os.path.join(args['output_dir'], 'mapped_singles')
// os.path.join(args['output_dir'], 'mapped')
// os.path.join(args['output_dir'], 'gvcf')
// os.path.join(args['output_dir'], 'stats')
// os.path.join(args['output_dir'], 'fastqc')
// os.path.join(args['output_dir'], 'quanttb')
// os.path.join(args['output_dir'], 'checkpoints')
// os.path.join(args['output_dir'], 'resistance/lofreq')
// os.path.join(args['output_dir'], 'structural_vars')
// os.path.join(args['output_dir'], 'minor_vars')
// os.path.join(args['output_dir'], 'logs/error')
// os.path.join(args['output_dir'], 'logs/info')]

// os.path.join(args['output_dir'], 'vcf/{}'.format(args['vcf_name']))
// os.path.join(args['output_dir'], 'vqsr/{}'.format(args['vcf_name']))
// os.path.join(args['output_dir'], 'fasta/{}'.format(args['vcf_name']))
// os.path.join(args['output_dir'], 'phylogeny/{}'.format(args['vcf_name']))
// os.path.join(args['output_dir'], 'resistance/{}/XBS'.format(args['vcf_name']))
// os.path.join(args['output_dir'], 'logs/{}.summary'.format(args['vcf_name'])), 'w')

params {

    // The input CSV sample file (the study id cannot start with 'XBS_REF_')
    //NOTE: The samplesheet should have the following fields [study, sample, library, attempt, flowcell, lane, index_sequence, r1, r2]
    //NOTE: Most of these parameters are used to create unique_id in XBS_main.py
    input_samplesheet = "${projectDir}/data/mock_data/input_samplesheet.csv"

    // The directory to which all output files should be written
    output_dir = "${projectDir}/results_mock"

    // The name of the output VCF file
    // NOTE: This parameter is used to derive the JOINT_NAME in XBS_main.py
    vcf_name = "dev.vcf"

    //Use this flag to skip the final merge
    skip_merge = false

    //The median coverage required to process the sample
    median_coverage_cutoff=10

    //The breadth of coverage required to process the sample
    breadth_of_coverage_cutoff=.90

    //The relative abundunce of the majority strain required to process the sample
    rel_abundance_cutoff=.80

    //The maximum fraction of NTM DNA allowed to process the sample
    ntm_fraction_cutoff=.20

    //The database to use for resistance calling
    resistance_db="${projectDir}/data/mock_data/resistance_db_v1"

    //The GVCF file containing the positive controls. All samples in this file must start with \'XBS_REF_\'
    ref_gvcf="${projectDir}/data/mock_data/reference_gvcfs_v02.g.vcf.gz"

    //The GVCF file containing the positive study specific controls. To be used when bulk analysis is impossible (for real time analysis of samples). All samples in this file must start with \'STUDY_REF\'
    ref_gvcf_study=""


    dbsnp_vcf = "${projectDir}/data/mock_data/tbvar.v3.vcf"
    ref_fasta = "${projectDir}/data/mock_data/NC-000962-3-H37Rv.fa"
    rrna_list = "${projectDir}/data/mock_data/rRNA.list"
    adapter_path = "${projectDir}/data/mock_data/TruSeq3-PE-2"


}


process {

    withName:
    'FASTQC.*' {
        cpus = 4
        memory = 4.GB
        conda = 'bioconda::fastqc=0.11.8'
    }

    withName:
    'TRIMMOMATIC.*' {
        cpus = 4
        memory = 4.GB
        conda = 'bioconda::trimmomatic=0.36'
    }

    withName:
    'TBPROFILER.*' {
        cpus = 4
        memory = 4.GB
        conda = 'bioconda::tb-profiler=3.0.8'
    }

    withName:
    'MULTIQC.*' {
        cpus = 4
        memory = 4.GB
        conda = 'bioconda::multiqc=1.11'
    }


    withName:
    'GATK.*' {
        cpus = 4
        memory = 4.GB
        conda = 'bioconda::gatk4=4.2.0.0'
    }


    withName:
    'CLUSTERPICKER.*' {
        cpus = 4
        memory = 4.GB
        conda = 'bioconda::clusterpicker=1.2.3'
    }

    withName:
    'SNPEFF.*' {
        cpus = 4
        memory = 4.GB
        conda = 'bioconda::snpeff=4.3.1t'
    }


    withName:
    'SAMTOOLS.*' {
        cpus = 4
        memory = 4.GB
        conda = 'bioconda::samtools=1.9'
    }


    withName:
    'BCFTOOLS.*' {
        cpus = 4
        memory = 4.GB
        conda = 'bioconda::bcftools=1.9'
    }


    withName:
    'VCFUTILS.*' {
        cpus = 4
        memory = 4.GB
        conda = 'bioconda::bcftools=1.9'
    }

    withName:
    'LOFREQ.*' {
        cpus = 4
        memory = 4.GB
        conda = 'bioconda::lofreq=2.1.5'
    }

    withName:
    'DELLY.*' {
        cpus = 4
        memory = 4.GB
        conda = 'bioconda::delly=0.8.7'
    }

    withName:
    'SPADES.*' {
        cpus = 4
        memory = 4.GB
        conda = 'bioconda::spades=3.11.1'
    }


    withName:
    'BLAST.*' {
        cpus = 4
        memory = 4.GB
        conda = 'bioconda::blast=2.7.1'
    }


    withName:
    'SNPSITES.*' {
        cpus = 4
        memory = 4.GB
        conda = 'bioconda::snp-sites=2.4.0'
    }

    withName:
    'SNPDISTS.*' {
        cpus = 4
        memory = 4.GB
        conda = 'bioconda::snp-dists=0.8.2'
    }

    withName:
    'IQTREE.*' {
        cpus = 4
        memory = 4.GB
        conda = 'bioconda::iqtree=2.1.2'
    }

    withName:
    'QUANTTB.*' {
        cpus = 4
        memory = 4.GB
        conda = 'jemunro::quanttb=1.01'
    }

    withName:
    'DATAMASH.*' {
        cpus = 4
        memory = 4.GB
        conda = 'conda-forge::datamash=1.3'
    }

    withName:
    'BWA.*' {
        cpus = 4
        memory = 4.GB
        conda = 'bioconda::bwa=0.7.17'
    }

}
