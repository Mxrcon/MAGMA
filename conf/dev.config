//NOTE: Result directories used in XBS_main.py
// os.path.join(args['output_dir'], 'mapped_singles')
// os.path.join(args['output_dir'], 'mapped')
// os.path.join(args['output_dir'], 'gvcf')
// os.path.join(args['output_dir'], 'stats')
// os.path.join(args['output_dir'], 'fastqc')
// os.path.join(args['output_dir'], 'quanttb')
// os.path.join(args['output_dir'], 'checkpoints')
// os.path.join(args['output_dir'], 'resistance/lofreq')
// os.path.join(args['output_dir'], 'structural_vars')
// os.path.join(args['output_dir'], 'minor_vars')
// os.path.join(args['output_dir'], 'logs/error')
// os.path.join(args['output_dir'], 'logs/info')]

// os.path.join(args['output_dir'], 'vcf/{}'.format(args['vcf_name']))
// os.path.join(args['output_dir'], 'vqsr/{}'.format(args['vcf_name']))
// os.path.join(args['output_dir'], 'fasta/{}'.format(args['vcf_name']))
// os.path.join(args['output_dir'], 'phylogeny/{}'.format(args['vcf_name']))
// os.path.join(args['output_dir'], 'resistance/{}/XBS'.format(args['vcf_name']))
// os.path.join(args['output_dir'], 'logs/{}.summary'.format(args['vcf_name'])), 'w')

params {

    // The input CSV sample file (the study id cannot start with 'XBS_REF_')
    //NOTE: The samplesheet should have the following fields [study, sample, library, attempt, flowcell, lane, index_sequence, r1, r2]
    //NOTE: Most of these parameters are used to create unique_id in XBS_main.py
    // input_samplesheet = "${projectDir}/resources/reference_set/xbs-nf.test.csv"
    //FIXME: Remove after mini devtime tests are done
    input_samplesheet = "${projectDir}/resources/reference_set/xbs-nf.mini.test.csv"

    // The directory to which all output files should be written
    outdir = "${projectDir}/results_test"

    // The name of the output VCF file
    // NOTE: This parameter is used to derive the JOINT_NAME in XBS_main.py
    vcf_name = "joint"

    //Use this flag to skip the final merge
    skip_merge = false

    //The median coverage required to process the sample
    median_coverage_cutoff = 10

    //The breadth of coverage required to process the sample
    breadth_of_coverage_cutoff = 0.90

    //The relative abundunce of the majority strain required to process the sample
    rel_abundance_cutoff = 0.80

    //The maximum fraction of NTM DNA allowed to process the sample
    ntm_fraction_cutoff = 0.20

    //TODO: Confirm if this is shared
    //The database to use for resistance calling
    resistance_db= false // "${projectDir}/data/test_data/resistance_db_v1"

    //NOTE: If the dataset is contaminated, Base Recalibration steps are skipped (XBS_call#L48)
    dataset_is_not_contaminated = false

    //NOTE: Output file for high quality variant depths XBS_call#L82
    compute_minor_variants = false


    //FIXME: (For SNPEFF) Add warning in readme NOT to include a reference file with multiple dots in name.
    ref_fasta_basename = "NC-000962-3-H37Rv"
    ref_fasta_dir = "${projectDir}/resources/genome"
    ref_fasta_dict = "${params.ref_fasta_dir}/${params.ref_fasta_basename}.dict"
    ref_fasta = "${params.ref_fasta_dir}/${params.ref_fasta_basename}.fa"
    ref_fasta_amb = "${params.ref_fasta}.amb"
    ref_fasta_ann = "${params.ref_fasta}.ann"
    ref_fasta_bwt = "${params.ref_fasta}.bwt"
    ref_fasta_fai = "${params.ref_fasta}.fai"
    ref_fasta_pac = "${params.ref_fasta}.pac"
    ref_fasta_sa = "${params.ref_fasta}.sa"


    //TODO: Confirm if this is shared
    drgenes_list = "${projectDir}/data/test_data/DRgenes.list"

    rrna_list = "${projectDir}/resources/regions/rRNA.list"

    benavente2015_vcf = "${projectDir}/resources/known/Benavente2015.UVPapproved.rRNAexcluded.vcf.gz"
    benavente2015_vcf_tbi = "${params.benavente2015_vcf}.tbi"

    coll2014_vcf = "${projectDir}/resources/truth/Coll2014.UVPapproved.rRNAexcluded.vcf.gz"
    coll2014_vcf_tbi = "${params.coll2014_vcf}.tbi"

    coll2018_vcf = "${projectDir}/resources/truth/Coll2018.UVPapproved.rRNAexcluded.vcf.gz"
    coll2018_vcf_tbi = "${params.coll2018_vcf}.tbi"

    napier2020_vcf = "${projectDir}/resources/truth/Napier2020.UVPapproved.rRNAexcluded.vcf.gz"
    napier2020_vcf_tbi = "${params.napier2020_vcf}.tbi"

    walker2015_vcf = "${projectDir}/resources/truth/Walker2015.UVPapproved.rRNAexcluded.vcf.gz"
    walker2015_vcf_tbi = "${params.walker2015_vcf}.tbi"

    zeng2018_vcf = "${projectDir}/resources/truth/Zeng2018.UVPapproved.rRNAexcluded.vcf.gz"
    zeng2018_vcf_tbi = "${params.zeng2018_vcf}.tbi"


    //FIXME Move all publishDir related content to config using the withName which is fixed in v21.10 onwards


    //-----------------------
    // Processes used in MAP_WF and QUANTTB
    //-----------------------

    FASTQC {
        results_dir = "${params.outdir}/fastqc/"
        save_mode = 'copy'
        should_publish = true

        fastqc_path = "fastqc"
    }

    BWA_MEM {
        results_dir = "${params.outdir}/bwa/mem/"
        save_mode = 'copy'
        should_publish = true

        bwa_path = "bwa"
        samtools_path = "samtools"
    }

    QUANTTB_QUANT {
        results_dir = "${params.outdir}/quanttb/quant/"
        save_mode = 'copy'
        should_publish = true

        quanttb_path = "quanttb"
    }


    //-----------------------
    // Processes used in CALL_WF
    //-----------------------

    SAMTOOLS_MERGE {
        results_dir = "${params.outdir}/samtools/merge/"
        save_mode = 'copy'
        should_publish = true

        samtools_path = "samtools"
    }

    GATK_MARK_DUPLICATES {
        results_dir = "${params.outdir}/gatk/mark_duplicates/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
    }

    GATK_BASE_RECALIBRATOR {
        results_dir = "${params.outdir}/gatk/base_recalibrator/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
    }

    GATK_APPLY_BQSR {
        results_dir = "${params.outdir}/gatk/apply_bqsr/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
    }

    SAMTOOLS_INDEX {
        results_dir = "${params.outdir}/samtools/index/"
        save_mode = 'copy'
        should_publish = true

        samtools_path = "samtools"
    }

    GATK_HAPLOTYPE_CALLER {
        results_dir = "${params.outdir}/gatk/haplotype_caller/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
        arguments = " -ploidy 1 --read-filter MappingQualityNotZeroReadFilter -G StandardAnnotation -G AS_StandardAnnotation "
    }

    GATK_HAPLOTYPE_CALLER__MINOR_VARIANTS {
        results_dir = "${params.outdir}/gatk/haplotype_caller__minor_variants/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
        arguments = " -ploidy 1 \
                      --minimum-mapping-quality 60 \
                      --min-base-quality-score 20 \
                      --read-filter MappingQualityNotZeroReadFilter \
                      -G StandardAnnotation \
                      --output-mode EMIT_ALL_ACTIVE_SITES "
    }

    LOFREQ_CALL__NTM {
        results_dir = "${params.outdir}/lofreq/call__ntm/"
        save_mode = 'copy'
        should_publish = true

        lofreq_path = "lofreq"
        region = "1472307-1472307"
        arguments = " -m 60 -Q 20 -a 1 "
    }

    LOFREQ_INDELQUAL {
        results_dir = "${params.outdir}/lofreq/indelqual/"
        save_mode = 'copy'
        should_publish = true

        lofreq_path = "lofreq"
        arguments = "-m 60"
    }

    SAMTOOLS_INDEX__LOFREQ {
        results_dir = "${params.outdir}/samtools/index__lofreq/"
        save_mode = 'copy'
        should_publish = true

        samtools_path = "samtools"
    }

    LOFREQ_CALL {
        results_dir = "${params.outdir}/lofreq/call/"
        save_mode = 'copy'
        should_publish = true

        lofreq_path = "lofreq"
        //NOTE: Curretly using default p-value for filtering. XBS_call#L118
        arguments = "-m 60 --call-indels"
    }

    LOFREQ_FILTER {
        results_dir = "${params.outdir}/lofreq/filter/"
        save_mode = 'copy'
        should_publish = true

        lofreq_path = "lofreq"
        arguments = "-a 60"
    }

    DELLY_CALL {
        results_dir = "${params.outdir}/delly/call/"
        save_mode = 'copy'
        should_publish = true

        delly_path = "delly"
        arguments = "-u 30"
    }

    BCFTOOLS_VIEW {
        results_dir = "${params.outdir}/bcftools/view/"
        save_mode = 'copy'
        should_publish = true

        bcftools_path = "bcftools"
    }

    GATK_INDEX_FEATURE_FILE {
        results_dir = "${params.outdir}/gatk/index_feature_file/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
    }

    GATK_SELECT_VARIANTS__INTERVALS {
        results_dir = "${params.outdir}/gatk/select_variants__intervals/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
    }

    SAMTOOLS_STATS {
        results_dir = "${params.outdir}/samtools/stats/"
        save_mode = 'copy'
        should_publish = true

        samtools_path = "samtools"
        arguments = "-F DUP,SUPPLEMENTARY,SECONDARY,UNMAP,QCFAIL"
    }

    GATK_COLLECT_WGS_METRICS {
        results_dir = "${params.outdir}/gatk/collect_wgs_metrics/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
        arguments = " --READ_LENGTH 0 --COVERAGE_CAP 10000 --COUNT_UNPAIRED"
    }

    GATK_FLAG_STAT {
        results_dir = "${params.outdir}/gatk/flag_stat/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
    }


    UTILS_SAMPLE_STATS {
        results_dir = "${params.outdir}/stats/samples/"
        save_mode = 'copy'
        should_publish = true
    }

    UTILS_COHORT_STATS {
        results_dir = "${params.outdir}/stats/cohort/"
        save_mode = 'copy'
        should_publish = true
    }



    //-----------------------
    // Processes used in MERGE_WF
    //-----------------------




    GATK_COMBINE_GVCFS {
        results_dir = "${params.outdir}/gatk/combine_gvcfs/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
        arguments = " -G StandardAnnotation -G AS_StandardAnnotation "

    }

    GATK_GENOTYPE_GVCFS {
        results_dir = "${params.outdir}/gatk/genotype_gvcfs"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
        arguments = " -G StandardAnnotation -G AS_StandardAnnotation --sample-ploidy 1 "
    }


    SNPEFF {
        results_dir = "${params.outdir}/snpeff"
        save_mode = 'copy'
        should_publish = true

        snpeff_path = "snpEff"
        arguments = " -nostats -ud 40 Mycobacterium_tuberculosis_h37rv "
    }


    BGZIP {
        results_dir = "${params.outdir}/bgzip"
        save_mode = 'copy'
        should_publish = true

        bgzip_path = "bgzip"
    }


    GATK_INDEX_FEATURE_FILE__COHORT {
        results_dir = "${params.outdir}/gatk/index_feature_file__cohort"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
    }



    GATK_SELECT_VARIANTS__SNP {
        results_dir = "${params.outdir}/gatk/select_variants__snp"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
        arguments = " --remove-unused-alternates --exclude-non-variants "
    }

    GATK_SELECT_VARIANTS__INDEL {
        results_dir = "${params.outdir}/gatk/select_variants__indel"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
        arguments = " --remove-unused-alternates --exclude-non-variants "
    }


    GATK_VARIANT_RECALIBRATOR__SNP {
        results_dir = "${params.outdir}/gatk/variant_recalibrator__snp"
        save_mode = 'copy'
        should_publish = true


        gatk_path = "gatk"
        arguments = " --use-allele-specific-annotations \
                      -AS \
                      -an AS_QD \
                      -an DP \
                      -an AS_MQ \
                      --target-titv 1.7 \
                      --truth-sensitivity-tranche 100.0 \
                      --truth-sensitivity-tranche 99.9 \
                      --truth-sensitivity-tranche 99.8 \
                      --truth-sensitivity-tranche 99.7 \
                      --truth-sensitivity-tranche 99.6 \
                      --truth-sensitivity-tranche 99.5 \
                      --truth-sensitivity-tranche 99.4 \
                      --truth-sensitivity-tranche 99.3 \
                      --truth-sensitivity-tranche 99.2 \
                      --truth-sensitivity-tranche 99.1 \
                      --truth-sensitivity-tranche 99.0 \
                      --max-gaussians 4 \
                      -mq-cap 60"
    }

    GATK_VARIANT_RECALIBRATOR__INDEL {
        results_dir = "${params.outdir}/gatk/variant_recalibrator__indel"
        save_mode = 'copy'
        should_publish = true


        gatk_path = "gatk"
        arguments = " -AS \
                      -an AS_QD \
                      -an DP \
                      -an AS_MQ \
                      --target-titv 1.8 \
                      --truth-sensitivity-tranche 100.0 \
                      --truth-sensitivity-tranche 99.9 \
                      --truth-sensitivity-tranche 99.8 \
                      --truth-sensitivity-tranche 99.7 \
                      --truth-sensitivity-tranche 99.6 \
                      --truth-sensitivity-tranche 99.5 \
                      --truth-sensitivity-tranche 99.4 \
                      --truth-sensitivity-tranche 99.3 \
                      --truth-sensitivity-tranche 99.2 \
                      --truth-sensitivity-tranche 99.1 \
                      --truth-sensitivity-tranche 99.0 \
                      --max-gaussians 4 \
                      -mq-cap 60"
    }


    GATK_APPLY_VQSR__SNP {
        results_dir = "${params.outdir}/gatk/apply_vqsr__snp"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
        arguments = " --ts-filter-level 99.90 -AS --exclude-filtered "
    }

    GATK_APPLY_VQSR__INDEL {
        results_dir = "${params.outdir}/gatk/apply_vqsr_indel"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
        arguments = ""
    }


    GATK_SELECT_VARIANTS__EXCLUSION__SNP {
        results_dir = "${params.outdir}/gatk/select_variants__exclusion__snp"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
    }



    GATK_SELECT_VARIANTS__EXCLUSION__INDEL {
        results_dir = "${params.outdir}/gatk/select_variants__exclusion__indel"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
    }


    GATK_MERGE_VCFS {
        results_dir = "${params.outdir}/gatk/merge_vcfs"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "gatk"
    }


    TBPROFILER_VCF_PROFILE__COHORT {
        results_dir = "${params.outdir}/tbprofiler/vcf_profile__cohort"
        save_mode = 'copy'
        should_publish = true

        tbprofiler_path = "tb-profiler"

    }


    TBPROFILER_COLLATE__COHORT {
        results_dir = "${params.outdir}/tbprofiler/collate__cohort"
        save_mode = 'copy'
        should_publish = true

        tbprofiler_path = "tb-profiler"
        prefix = "XBS.resistance"
    }


    TBPROFILER_VCF_PROFILE__LOFREQ {
        results_dir = "${params.outdir}/tbprofiler/vcf_profile__lofreq"
        save_mode = 'copy'
        should_publish = true

        tbprofiler_path = "tb-profiler"

    }

    TBPROFILER_COLLATE__LOFREQ {
        results_dir = "${params.outdir}/tbprofiler/collate__lofreq"
        save_mode = 'copy'
        should_publish = true

        tbprofiler_path = "tb-profiler"
        prefix = "XBS.resistance.LoFreq"

    }



    CLUSTER_PICKER {
        results_dir = "${params.outdir}/cluster_picker/"
        save_mode = 'copy'
        should_publish = true

        bootstrap_1 = 0
        bootstrap_2 = 0
        max_cluster_size = 0
        algorithm = 'gap'

    }

}

executor {
    queueSize = 1
}


process {
  cpus = 8
  memory = 14.GB
  errorStrategy = { task.attempt < 4 ? 'retry' : 'ignore' }

//     withName:
//     'FASTQC.*' {
//         cpus = 4
//         memory = 4.GB
//         conda = 'bioconda::fastqc=0.11.8'
//     }

//     withName:
//     'TBPROFILER.*' {
//         cpus = 4
//         memory = 4.GB
//         conda = 'bioconda::tb-profiler=3.0.8'
//     }

//     withName:
//     'MULTIQC.*' {
//         cpus = 4
//         memory = 4.GB
//         conda = 'bioconda::multiqc=1.11'
//     }


//     withName:
//     'GATK.*' {
//         cpus = 4
//         memory = 4.GB
//         conda = 'bioconda::gatk4=4.2.0.0'
//     }


//     withName:
//     'CLUSTERPICKER.*' {
//         cpus = 4
//         memory = 4.GB
//         conda = 'bioconda::clusterpicker=1.2.3'
//     }

//     withName:
//     'SNPEFF.*' {
//         cpus = 4
//         memory = 4.GB
//         conda = 'bioconda::snpeff=4.3.1t'
//     }


//     withName:
//     'SAMTOOLS.*' {
//         cpus = 4
//         memory = 4.GB
//         conda = 'bioconda::samtools=1.9'
//     }


//     withName:
//     'BCFTOOLS.*' {
//         cpus = 4
//         memory = 4.GB
//         conda = 'bioconda::bcftools=1.9'
//     }


//     withName:
//     'VCFUTILS.*' {
//         cpus = 4
//         memory = 4.GB
//         conda = 'bioconda::bcftools=1.9'
//     }

//     withName:
//     'LOFREQ.*' {
//         cpus = 4
//         memory = 4.GB
//         conda = 'bioconda::lofreq=2.1.5'
//     }

//     withName:
//     'DELLY.*' {
//         cpus = 4
//         memory = 4.GB
//         conda = 'bioconda::delly=0.8.7'
//     }

//     withName:
//     'SPADES.*' {
//         cpus = 4
//         memory = 4.GB
//         conda = 'bioconda::spades=3.11.1'
//     }


//     withName:
//     'BLAST.*' {
//         cpus = 4
//         memory = 4.GB
//         conda = 'bioconda::blast=2.7.1'
//     }


//     withName:
//     'SNPSITES.*' {
//         cpus = 4
//         memory = 4.GB
//         conda = 'bioconda::snp-sites=2.4.0'
//     }

//     withName:
//     'SNPDISTS.*' {
//         cpus = 4
//         memory = 4.GB
//         conda = 'bioconda::snp-dists=0.8.2'
//     }

//     withName:
//     'IQTREE.*' {
//         cpus = 4
//         memory = 4.GB
//         conda = 'bioconda::iqtree=2.1.2'
//     }

//     withName:
//     'QUANTTB.*' {
//         cpus = 4
//         memory = 4.GB
//        conda = 'jemunro::quanttb=1.01 bioconda::bwa=0.7.17'
//     }

//     withName:
//     'DATAMASH.*' {
//         cpus = 4
//         memory = 4.GB
//         conda = 'conda-forge::datamash=1.3'
//     }

//     withName:
//     'BWA.*' {
//         cpus = 4
//         memory = 4.GB
//         conda = 'bioconda::bwa=0.7.17 bioconda::samtools=1.9'
//     }

}
