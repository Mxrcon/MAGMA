params {

    // The input CSV sample file (the study id cannot start with 'XBS_REF_')
    //NOTE: The samplesheet should have the following fields [study, sample, library, attempt, flowcell, lane, index_sequence, r1, r2]
    //NOTE: Most of these parameters are used to create unique_id in XBS_main.py
    input_samplesheet = "${projectDir}/data/mock_data/input_samplesheet.csv"

    // The directory to which all output files should be written
    outdir = "${projectDir}/results"

    reference_path = "/home/shared_data_ghi/CWGSMTB/References/NC-000962-3-H37Rv/"
    resource_path = "${params.reference_path}/Annotations/pipeline/ExpandedTruth"
    dbsnp = "${params.reference_path}/Annotations/dbSNP/tbvar/tbvar.v3.vcf"

    rrna = "${params.reference_path}/Annotations/pipeline/rRNA.list"

    software_path = "/home/shared_data_ghi/CWGSMTB/Software"
    conda_dir = "${params.software_path}/anaconda3"

    ref_fasta = "${params.reference_path}/NC-000962-3-H37Rv.fa"
    ref_fasta_dict = "${params.reference_path}/NC-000962-3-H37Rv.dict"

    //NOTE Move all publishDir related parameters to process-withName section which is fixed in Nextflow v21.10 onwards

    //-----------------------
    // Processes used in MAP_WF and QUANTTB
    //-----------------------

    FASTQC {
        results_dir = "${params.outdir}/fastqc/"
        save_mode = 'copy'
        should_publish = true

        fastqc_path = "${params.software_path}/FastQC-0.11.8/fastqc"
    }

    BWA_MEM {
        results_dir = "${params.outdir}/bwa/mem/"
        save_mode = 'copy'
        should_publish = true

        bwa_path = "${params.software_path}/bwa-0.7.17/bwa"
        samtools_path = "${params.software_path}/samtools-1.9/samtools"
    }

    QUANTTB_QUANT {
        results_dir = "${params.outdir}/quanttb/quant/"
        save_mode = 'copy'
        should_publish = true

        quanttb_venv = "${params.software_path}/FixedQuantTB/"
        quanttb_path = "quanttb"
    }


    //-----------------------
    // Processes used in CALL_WF
    //-----------------------

    SAMTOOLS_MERGE {
        results_dir = "${params.outdir}/samtools/merge/"
        save_mode = 'copy'
        should_publish = true

        samtools_path = "${params.software_path}/samtools-1.9/samtools"
    }

    GATK_MARK_DUPLICATES {
        results_dir = "${params.outdir}/gatk/mark_duplicates/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "${params.software_path}/gatk-4.2.0.0/gatk"
    }

    GATK_BASE_RECALIBRATOR {
        results_dir = "${params.outdir}/gatk/base_recalibrator/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "${params.software_path}/gatk-4.2.0.0/gatk"
    }

    GATK_APPLY_BQSR {
        results_dir = "${params.outdir}/gatk/apply_bqsr/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "${params.software_path}/gatk-4.2.0.0/gatk"
    }

    SAMTOOLS_INDEX {
        results_dir = "${params.outdir}/samtools/index/"
        save_mode = 'copy'
        should_publish = true

        samtools_path = "${params.software_path}/samtools-1.9/samtools"
    }

    GATK_HAPLOTYPE_CALLER {
        results_dir = "${params.outdir}/gatk/haplotype_caller/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "${params.software_path}/gatk-4.2.0.0/gatk"
        arguments = " -ploidy 1 --read-filter MappingQualityNotZeroReadFilter -G StandardAnnotation -G AS_StandardAnnotation "
    }

    GATK_HAPLOTYPE_CALLER__MINOR_VARIANTS {
        results_dir = "${params.outdir}/gatk/haplotype_caller__minor_variants/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "${params.software_path}/gatk-4.2.0.0/gatk"
        arguments = " -ploidy 1 \
                      --minimum-mapping-quality 60 \
                      --min-base-quality-score 20 \
                      --read-filter MappingQualityNotZeroReadFilter \
                      -G StandardAnnotation \
                      --output-mode EMIT_ALL_ACTIVE_SITES "
    }

    LOFREQ_CALL__NTM {
        results_dir = "${params.outdir}/lofreq/call__ntm/"
        save_mode = 'copy'
        should_publish = true

        lofreq_path = "${params.software_path}/lofreq-2.1.5/src/lofreq/lofreq"
        arguments = " -m 60 -Q 20 -a 1 "
        region = "1472307-1472307"
    }

    LOFREQ_INDELQUAL {
        results_dir = "${params.outdir}/lofreq/indelqual/"
        save_mode = 'copy'
        should_publish = true

        lofreq_path = "${params.software_path}/lofreq-2.1.5/src/lofreq/lofreq"
        arguments = "-m 60"
    }

    SAMTOOLS_INDEX__LOFREQ {
        results_dir = "${params.outdir}/samtools/index__lofreq/"
        save_mode = 'copy'
        should_publish = true

        samtools_path = "${params.software_path}/samtools-1.9/samtools"
    }

    LOFREQ_CALL {
        results_dir = "${params.outdir}/lofreq/call/"
        save_mode = 'copy'
        should_publish = true

        lofreq_path = "${params.software_path}/lofreq-2.1.5/src/lofreq/lofreq"
        //NOTE: Curretly using default p-value for filtering. XBS_call#L118
        arguments = "-m 60 --call-indels"
    }

    LOFREQ_FILTER {
        results_dir = "${params.outdir}/lofreq/filter/"
        save_mode = 'copy'
        should_publish = true

        lofreq_path = "${params.software_path}/lofreq-2.1.5/src/lofreq/lofreq"
        arguments = "-a 60"
    }

    DELLY_CALL {
        results_dir = "${params.outdir}/delly/call/"
        save_mode = 'copy'
        should_publish = true

        delly_path = "${params.software_path}/delly-v0.8.7/delly_v0.8.7_linux_x86_64bit"
        arguments = "-u 30"
    }

    BCFTOOLS_VIEW {
        results_dir = "${params.outdir}/bcftools/view/"
        save_mode = 'copy'
        should_publish = true

        bcftools_path = "${params.software_path}/bcftools-1.9/bcftools"
    }

    GATK_INDEX_FEATURE_FILE {
        results_dir = "${params.outdir}/gatk/index_feature_file/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "${params.software_path}/gatk-4.2.0.0/gatk"
    }

    GATK_SELECT_VARIANTS__INTERVALS {
        results_dir = "${params.outdir}/gatk/select_variants__intervals/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "${params.software_path}/gatk-4.2.0.0/gatk"
    }

    SAMTOOLS_STATS {
        results_dir = "${params.outdir}/samtools/stats/"
        save_mode = 'copy'
        should_publish = true

        samtools_path = "${params.software_path}/samtools-1.9/samtools"
        arguments = "-F DUP,SUPPLEMENTARY,SECONDARY,UNMAP,QCFAIL"
    }

    GATK_COLLECT_WGS_METRICS {
        results_dir = "${params.outdir}/gatk/collect_wgs_metrics/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "${params.software_path}/gatk-4.2.0.0/gatk"
        arguments = " --READ_LENGTH 0 --COVERAGE_CAP 10000 --COUNT_UNPAIRED"
    }

    GATK_FLAG_STAT {
        results_dir = "${params.outdir}/gatk/flag_stat/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "${params.software_path}/gatk-4.2.0.0/gatk"
    }

    UTILS_SAMPLE_STATS {
        results_dir = "${params.outdir}/stats/samples/"
        save_mode = 'copy'
        should_publish = true
    }

    UTILS_COHORT_STATS {
        results_dir = "${params.outdir}/stats/cohort/"
        save_mode = 'copy'
        should_publish = true
    }

    //-----------------------
    // Processes used in MERGE_WF
    //-----------------------



    GATK_COMBINE_GVCFS {
        results_dir = "${params.outdir}/gatk/combine_gvcfs/"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "${params.software_path}/gatk-4.2.0.0/gatk"
        arguments = " -G StandardAnnotation -G AS_StandardAnnotation "
    }

    GATK_GENOTYPE_GVCFS {
        results_dir = "${params.outdir}/gatk/genotype_gvcfs"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "${params.software_path}/gatk-4.2.0.0/gatk"
        arguments = " -G StandardAnnotation -G AS_StandardAnnotation --sample-ploidy 1 "
    }


    SNPEFF {
        results_dir = "${params.outdir}/snpeff"
        save_mode = 'copy'
        should_publish = true

        snpeff_path = " ${params.software_path}/jre-8.131/bin/java -jar ${params.software_path}/snpeff-4.3T/snpEff/snpEff.jar"
        arguments = " -nostats -ud 40 "
    }


    GATK_SELECT_VARIANTS {
        results_dir = "${params.outdir}/gatk/select_variants"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "${params.software_path}/gatk-4.2.0.0/gatk"
        arguments = " --remove-unused-alternates --exclude-non-variants "
    }


    GATK_VARIANT_RECALIBRATOR__SNP {
        results_dir = "${params.outdir}/gatk/variant_recalibrator"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "${params.software_path}/gatk-4.2.0.0/gatk"
        arguments = " --use-allele-specific-annotations \
                      -AS \
                      -an AS_QD \
                      -an DP \
                      -an AS_MQ \
                      --target-titv 1.7 \
                      --truth-sensitivity-tranche 100.0 \
                      --truth-sensitivity-tranche 99.9 \
                      --truth-sensitivity-tranche 99.8 \
                      --truth-sensitivity-tranche 99.7 \
                      --truth-sensitivity-tranche 99.6 \
                      --truth-sensitivity-tranche 99.5 \
                      --truth-sensitivity-tranche 99.4 \
                      --truth-sensitivity-tranche 99.3 \
                      --truth-sensitivity-tranche 99.2 \
                      --truth-sensitivity-tranche 99.1 \
                      --truth-sensitivity-tranche 99.0 \
                      --max-gaussians 4 \
                      -mq-cap 60"
    }

    GATK_VARIANT_RECALIBRATOR__INDEL {
        results_dir = "${params.outdir}/gatk/variant_recalibrator"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "${params.software_path}/gatk-4.2.0.0/gatk"
        arguments = " -AS \
                      -an AS_QD \
                      -an DP \
                      -an AS_MQ \
                      --target-titv 1.8 \
                      --truth-sensitivity-tranche 100.0 \
                      --truth-sensitivity-tranche 99.9 \
                      --truth-sensitivity-tranche 99.8 \
                      --truth-sensitivity-tranche 99.7 \
                      --truth-sensitivity-tranche 99.6 \
                      --truth-sensitivity-tranche 99.5 \
                      --truth-sensitivity-tranche 99.4 \
                      --truth-sensitivity-tranche 99.3 \
                      --truth-sensitivity-tranche 99.2 \
                      --truth-sensitivity-tranche 99.1 \
                      --truth-sensitivity-tranche 99.0 \
                      --max-gaussians 4 \
                      -mq-cap 60"
    }




    GATK_APPLY_VQSR__SNP {
        results_dir = "${params.outdir}/gatk/apply_vqsr_snp"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "${params.software_path}/gatk-4.2.0.0/gatk"
        mode = 'SNP'
        argument = " --ts-filter-level 99.90 -AS --exclude-filtered "
    }

    GATK_APPLY_VQSR__INDEL {
        results_dir = "${params.outdir}/gatk/apply_vqsr_indel"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "${params.software_path}/gatk-4.2.0.0/gatk"
        mode = 'INDEL'
    }


    GATK_VARIANTS_TO_TABLE {
        results_dir = "${params.outdir}/gatk/variants_to_table"
        save_mode = 'copy'
        should_publish = true

        gatk_path = "${params.software_path}/gatk-4.2.0.0/gatk"
        datamash_path = "${params.software_path}/datamash-1.3/datamash"
    }


    CLUSTER_PICKER {
        results_dir = "${params.outdir}/cluster_picker/"
        save_mode = 'copy'
        should_publish = true

        bootstrap_1 = 0
        bootstrap_2 = 0
        max_cluster_size = 0
        algorithm = 'gap'

        cluster_picker_path = "${params.software_path}/ClusterPicker_1.2.3/ClusterPicker_1.2.3.jar"
    }


    IQTREE {
        results_dir = "${params.outdir}/iqtree"
        save_mode = 'copy'
        should_publish = true

        iqtree_path= "${params.software_path}/iqtree-2.1.2-Linux/bin/iqtree2"
        arguments = " -allnni -redo "
    }


    SNP_DISTS {
        results_dir = "${params.outdir}/snp_dists/"
        save_mode = 'copy'
        should_publish = true

        snp_dists_path= "${params.software_path}/snp-dists/snp-dist"
        arguments = " -allnni -redo "
    }

    SNP_SITES {
        results_dir = "${params.outdir}/snp_sites/"
        save_mode = 'copy'
        should_publish = true

        snp_dists_path= "${params.software_path}/snp-sites-2.4.0/src/snp-sites"
    }

    BGZIP {
        results_dir = "${params.outdir}/bgzip/"
        save_mode = 'copy'
        should_publish = true

        bgzip_path= "${params.software_path}/tabix-0.2.6/bgzip"
    }


    TBPROFILER_VCF_PROFILE__COHORT {
        results_dir = "${params.outdir}/tbprofiler/vcf_profile/cohort/"
        save_mode = 'copy'
        should_publish = true

        tb_profiler_path= "${params.software_path}/TBProfiler/tb-profiler"
        tb_profiler_venv="${params.software_path}/venv_tbprofiler/"
    }

    TBPROFILER_VCF_PROFILE__SAMPLE {
        results_dir = "${params.outdir}/tbprofiler/vcf_profile/samples/"
        save_mode = 'copy'
        should_publish = true

        tb_profiler_path= "${params.software_path}/TBProfiler/tb-profiler"
        tb_profiler_venv="${params.software_path}/venv_tbprofiler/"
    }

    TBPROFILER_COLLATE {
        results_dir = "${params.outdir}/tbprofiler/collate/"
        save_mode = 'copy'
        should_publish = true

        tb_profiler_path= "${params.software_path}/TBProfiler/tb-profiler"
        tb_profiler_venv="${params.software_path}/venv_tbprofiler/"
    }


}

executor {
    queueSize = 2
    pollInterval = '10sec'
    submitRateLimit = '50/2min'
}

process {
    executor = "pbs" // OR "pbspro"
    queue = "scattergather"

//NOTE: To use this particular executor header, wrap the nextflow (and pipelien) invocation in a bash script.
// clusterOptions = "-A GHI "


    cpus = 4
    memory = 8.GB



    withName: '.*QUANTTB.*' {
       beforeScript = "source ${params.QUANTTB_QUANT.quanttb_venv}/activate.sh"
       //NOTE: Uncomment if there is a corresponding activate script which you'd like to run
       // afterScript = "source ${params.QUANTTB_QUANT.quanttb_venv}/deactivate.sh"
       afterScript = "deactivate"
    }



}
